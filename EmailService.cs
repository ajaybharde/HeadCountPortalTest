using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;
using System.Collections.Generic;
using System.Net.Mail;
using UkAppsUtils.Config;
using UkAppsUtils.Email;
using UkAppsUtils.LDAP;
using UkAppsUtils.SharedServices;

using System;

using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ServiceModel.Types;
using ServiceStack.OrmLite;


using UkAppsUtils.Authorisation;
using UkAppsUtils.Logging;
using Headcount.DTO;
using Headcount.ServiceModel.Types;
using ServiceStack.Common.Web;
using ServiceStack.ServiceInterface.Auth;
using System.Data;
using System.Data.SqlClient;
using Headcount.ServiceInterface.Utilities;

namespace ServiceInterface
{
    #region route

    [Route("/Email/sendemail", "GET")]
    public class SnedEmailReq : IReturn<AppSettings>
    {

        public string Surname { get; set; }
        public string Forename { get; set; }
    }

    #endregion

    public class EmailService : Service
    {
        public void Get(SnedEmailReq request)
        {
            var currenrUser = WindowsHelper.GetUserFromAD(WindowsHelper.WindowsUserName); ;
            var ToEmailList = GetToEmailList();
            var emailBuilder = new StringBuilder();
            emailBuilder.Append("**************************************************************************************** </br>");
            emailBuilder.Append("<b>This is Pending Request Notification.</b> </br>");
            if (ConfigHelper.COPApplEnv != "Production")
            {
                emailBuilder.Append("If this had been production, the following email would have been sent to:</br>");
                foreach (var ToEmail in ToEmailList)
                {
                    emailBuilder.Append(ToEmail + "</br>");
                }
                ToEmailList = new List<string> { currenrUser.Email };
            }

            emailBuilder.Append("**************************************************************************************** </br>");
            emailBuilder.Append("New record (Surname: <b>" + request.Surname + "</b>, Forename:<b> " + request.Forename + "</b>) has been created in UK Headcount Tool.");
            emailBuilder.Append("<p><font size=" + @"""4""" + " color=" + @"""#CC3300""" + ">Action Required:</font><font size=" + @"""3""" + "> Please update security related fields.</font></p>");

            var emailBodyParams = new EmailBodyParams
            {
                AppName = ConfigHelper.ApplicationName + " Tool",
                TextTop = emailBuilder.ToString(),
                LinkUrl = ConfigHelper.AppUrl + "#/pendingRequest",
                LinkText = "Click here to view pending requests",
                TextBottom = "This email was automatically generated by [" + ConfigHelper.ApplicationName + "  Tool], please do not reply."


            };
            MessageParams msgParams = null;
            msgParams = new MessageParams
             {
                 Subject = "UK Headcount Tool | New Record Created",
                 To = ToEmailList,
                 From = "donotreply@conocophillips.com",
                 Body = EmailBody.Render(emailBodyParams),
                 CopApplEnv = ConfigHelper.COPApplEnv,
                 NonProductionEmail = currenrUser.Email,
                 SendToOriginalRecipients = true
             };

            ValidateAndSend(msgParams, false);
        }
        /// <summary>
        /// GetToEmailList
        /// </summary>
        /// <returns></returns>
        public List<string> GetToEmailList()
        {
            var ToEmailList = Db.Select<UserAuth>().Where(a => a.Roles.Contains(RoleDTO.Security_Team_Role)).Select(a => a.Email).ToList<string>();
            return ToEmailList;
        }
        private static void ValidateAndSend(MessageParams msgParams, bool useAsync)
        {
            // Validate the email objects
            var validator = new MessageParamsValidator();
            validator.Validate(msgParams);

            // Send the email
            MailMessage mailMessage = EmailMethods.CreateMailMessage(msgParams);

            if (useAsync)
            {
                //Async is non-blocking but can be blocked from sending (probably as it mimics spam) -- use for notifications
                EmailMethods.SendEmailAsync(mailMessage);
            }
            else
            {
                //Sync is blocking but more reliable -- use for batch
                EmailMethods.SendEmail(mailMessage);
            }
        }
    }
}
